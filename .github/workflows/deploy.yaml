name: Deploy Backend Natively on Raspberry Pi

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted # Build and deploy directly on your Pi
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Build application natively
        run: |
          echo "Building application natively on ARM64..."
          go mod download
          go mod verify
          CGO_ENABLED=1 go build -ldflags="-w -s" -trimpath -o app ./cmd/api

          # Debug: Check if the executable was created and its properties
          echo "Checking built executable..."
          ls -la app
          echo "Executable size: $(stat -c%s app) bytes"

      - name: Create Firebase key file from environment variable
        run: |
          echo "Creating Firebase key file from environment variable..."
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > sharedBitesFirebase.json

          # Verify the JSON is valid
          if ! jq empty sharedBitesFirebase.json 2>/dev/null; then
            echo "❌ Firebase JSON is not valid"
            exit 1
          fi
          echo "✅ Firebase key file created successfully"

      - name: Build Docker image using main Dockerfile
        run: |
          echo "Building Docker image using main Dockerfile..."

          # Build the image using the main Dockerfile
          docker build --platform linux/arm64 -t sharedbites-backend:latest .

          # Debug: Check what's in the built image
          echo "Checking contents of built image..."
          docker run --rm sharedbites-backend:latest ls -la /app

      - name: Setup PostgreSQL
        run: |
          echo "Setting up PostgreSQL..."

          # Validate required secrets
          if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then
            echo "❌ POSTGRES_PASSWORD secret is not set or is empty"
            echo "Please add POSTGRES_PASSWORD to your GitHub repository secrets"
            exit 1
          fi

          echo "✅ POSTGRES_PASSWORD secret is configured"

          # Create PostgreSQL network if it doesn't exist
          docker network create sharedbites-network 2>/dev/null || true

          # Stop and remove existing PostgreSQL container if it exists
          if [ "$(docker ps -q -f name=sharedbites-postgres)" ]; then
              echo "Stopping existing PostgreSQL container..."
              docker stop sharedbites-postgres
          fi
          if [ "$(docker ps -aq -f status=exited -f name=sharedbites-postgres)" ]; then
              echo "Removing existing PostgreSQL container..."
              docker rm sharedbites-postgres
          fi

          # Run PostgreSQL container
          echo "Starting PostgreSQL container..."
          docker run -d \
            --name sharedbites-postgres \
            --network sharedbites-network \
            -e POSTGRES_DB=sharedbites \
            -e POSTGRES_USER=sharedbites_user \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            -v sharedbites-postgres-data:/var/lib/postgresql/data \
            -p 5432:5432 \
            --restart unless-stopped \
            postgres:15-alpine

          # Check if container started successfully
          if [ $? -ne 0 ]; then
            echo "❌ Failed to start PostgreSQL container"
            exit 1
          fi

          echo "✅ PostgreSQL container started"

          # Wait for PostgreSQL to be ready with better debugging
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..60}; do
            echo "Attempt $i/60: Checking PostgreSQL readiness..."
            
            # Check if container is running
            if ! docker ps -q -f name=sharedbites-postgres | grep -q .; then
              echo "❌ PostgreSQL container is not running"
              echo "Container logs:"
              docker logs sharedbites-postgres
              echo "Container status:"
              docker ps -a -f name=sharedbites-postgres
              exit 1
            fi
            
            # Try multiple methods to check readiness
            if docker exec sharedbites-postgres pg_isready -U sharedbites_user -d sharedbites > /dev/null 2>&1; then
              echo "✅ PostgreSQL is ready (pg_isready)"
              break
            fi
            
            # Alternative: try to connect with psql
            if docker exec sharedbites-postgres psql -U sharedbites_user -d sharedbites -c "SELECT 1;" > /dev/null 2>&1; then
              echo "✅ PostgreSQL is ready (psql connection)"
              break
            fi
            
            # Alternative: check if port is listening
            if docker exec sharedbites-postgres netstat -tlnp | grep -q ":5432 "; then
              echo "✅ PostgreSQL port is listening"
              # Give it a moment more to fully initialize
              sleep 2
              if docker exec sharedbites-postgres psql -U sharedbites_user -d sharedbites -c "SELECT 1;" > /dev/null 2>&1; then
                echo "✅ PostgreSQL is ready (port + psql)"
                break
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "❌ PostgreSQL failed to start within 60 seconds"
              echo "PostgreSQL container logs:"
              docker logs sharedbites-postgres
              echo "PostgreSQL container status:"
              docker ps -f name=sharedbites-postgres
              exit 1
            fi
            
            sleep 1
          done

          echo "✅ PostgreSQL is fully ready and accepting connections"

      - name: Deploy application container
        run: |
          export CONTAINER_NAME=sharedbites-backend-container
          export APP_PORT=8080
          export HOST_PORT=8080

          # Stop and remove existing container if it exists
          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping existing application container..."
              docker stop $CONTAINER_NAME
          fi
          if [ "$(docker ps -aq -f status=exited -f name=$CONTAINER_NAME)" ]; then
              echo "Removing existing application container..."
              docker rm $CONTAINER_NAME
          fi

          # Run the new container
          docker run -d \
            --name $CONTAINER_NAME \
            --network sharedbites-network \
            -p $HOST_PORT:$APP_PORT \
            --restart unless-stopped \
            --memory="512m" \
            --cpus="1.0" \
            -e DB_DSN="postgres://sharedbites_user:${{ secrets.POSTGRES_PASSWORD }}@sharedbites-postgres:5432/sharedbites?sslmode=disable" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            -e FIREBASE_SERVICE_ACCOUNT_KEY_PATH="/app/sharedBitesFirebase.json" \
            sharedbites-backend:latest

          # Clean up old images (keep recent ones)
          docker image prune -af --filter "until=24h"

          # Show container status
          echo "Container status:"
          docker ps -f name=$CONTAINER_NAME
          docker ps -f name=sharedbites-postgres

          # Show container logs (last 10 lines)
          echo "Recent application logs:"
          docker logs --tail 10 $CONTAINER_NAME

      - name: Cleanup build artifacts
        run: |
          echo "Cleaning up build artifacts..."
          rm -f app sharedBitesFirebase.json

      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 15

          # Test if the application is responding
          if curl -f http://localhost:8080/healthcheck > /dev/null 2>&1; then
            echo "✅ Application is running and responding to health checks"
          else
            echo "❌ Application health check failed"
            echo "Application container logs:"
            docker logs sharedbites-backend-container
            echo "PostgreSQL container logs:"
            docker logs sharedbites-postgres
            exit 1
          fi

          # Test database connection
          echo "Testing database connection..."
          if docker exec sharedbites-postgres psql -U sharedbites_user -d sharedbites -c "SELECT 1;" > /dev/null 2>&1; then
            echo "✅ Database connection successful"
          else
            echo "❌ Database connection failed"
            exit 1
          fi
