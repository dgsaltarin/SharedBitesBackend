name: Deploy Backend to Self-Hosted Runner on Pi

on:
  push:
    branches:
      - main

jobs:
  build: # Build job still runs on GitHub-hosted runners (for speed and cross-compilation)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Determine Image Tag
        id: image_tag
        run: echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64 # Crucial
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/your-backend-app:${{ steps.image_tag.outputs.TAG }}
            ${{ secrets.DOCKER_USERNAME }}/your-backend-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build # Depends on the build job completing
    runs-on: self-hosted # IMPORTANT: Specifies to run on your Pi
    # You might need to pass the image tag from the build job
    # This can be done using artifacts or by directly accessing outputs if structured correctly
    # For simplicity, let's assume 'latest' is sufficient or you pass the tag as an input/secret
    steps:
      - name: Pull and restart container
        env: # Make secrets available as environment variables if needed for the script
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          export IMAGE_NAME=${DOCKER_USERNAME}/your-backend-app # Or directly use secrets.DOCKER_USERNAME
          export IMAGE_TAG=latest # Or get the specific tag from build job output
          export CONTAINER_NAME=my-backend-container
          export APP_PORT=3000
          export HOST_PORT=8080

          # Login to Docker Hub (if image is private and runner isn't already logged in)
          # echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          docker pull $IMAGE_NAME:$IMAGE_TAG

          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              docker stop $CONTAINER_NAME
          fi
          if [ "$(docker ps -aq -f status=exited -f name=$CONTAINER_NAME)" ]; then
              docker rm $CONTAINER_NAME
          fi

          docker run -d \
            --name $CONTAINER_NAME \
            -p $HOST_PORT:$APP_PORT \
            --restart always \
            $IMAGE_NAME:$IMAGE_TAG

          docker image prune -af
