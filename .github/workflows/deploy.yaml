name: Deploy Backend Natively on Raspberry Pi

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: raspberrypi-daniel-lab # Build and deploy directly on your Pi
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Build application natively
        run: |
          echo "Building application natively on ARM64..."
          go mod download
          go mod verify
          CGO_ENABLED=1 go build -ldflags="-w -s" -trimpath -o app ./cmd/api

      - name: Create optimized Dockerfile for local build
        run: |
          cat > Dockerfile.local << 'EOF'
          FROM alpine:latest

          # Install runtime dependencies
          RUN apk add --no-cache \
              ca-certificates \
              tzdata \
              wget \
              && update-ca-certificates

          # Create a non-root user for security
          RUN addgroup -g 1001 -S appgroup && \
              adduser -u 1001 -S appuser -G appgroup

          # Set the working directory
          WORKDIR /app

          # Copy the pre-built executable
          COPY app .

          # Change ownership to the non-root user
          RUN chown -R appuser:appgroup /app

          # Switch to non-root user
          USER appuser

          # Expose the port the application listens on
          EXPOSE 8080

          # Add health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
              CMD wget --no-verbose --tries=1 --spider http://localhost:8080/healthcheck || exit 1

          # Command to run the application
          CMD ["./app"]
          EOF

      - name: Build Docker image locally
        run: |
          echo "Building Docker image locally..."
          docker build -f Dockerfile.local -t sharedbites-backend:latest .

      - name: Deploy container
        run: |
          export CONTAINER_NAME=sharedbites-backend-container
          export APP_PORT=8080
          export HOST_PORT=8080

          # Stop and remove existing container if it exists
          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping existing container..."
              docker stop $CONTAINER_NAME
          fi
          if [ "$(docker ps -aq -f status=exited -f name=$CONTAINER_NAME)" ]; then
              echo "Removing existing container..."
              docker rm $CONTAINER_NAME
          fi

          # Run the new container
          docker run -d \
            --name $CONTAINER_NAME \
            -p $HOST_PORT:$APP_PORT \
            --restart unless-stopped \
            --memory="512m" \
            --cpus="1.0" \
            -e DB_DSN="${{ secrets.DB_DSN }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            -e FIREBASE_SERVICE_ACCOUNT_KEY_PATH="/app/firebase-key.json" \
            -v ${{ secrets.FIREBASE_KEY_PATH }}:/app/firebase-key.json:ro \
            sharedbites-backend:latest

          # Clean up old images (keep recent ones)
          docker image prune -af --filter "until=24h"

          # Show container status
          echo "Container status:"
          docker ps -f name=$CONTAINER_NAME

          # Show container logs (last 10 lines)
          echo "Recent container logs:"
          docker logs --tail 10 $CONTAINER_NAME

      - name: Cleanup build artifacts
        run: |
          echo "Cleaning up build artifacts..."
          rm -f app Dockerfile.local

      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10

          # Test if the application is responding
          if curl -f http://localhost:8080/healthcheck > /dev/null 2>&1; then
            echo "✅ Application is running and responding to health checks"
          else
            echo "❌ Application health check failed"
            echo "Container logs:"
            docker logs sharedbites-backend-container
            exit 1
          fi
