name: Deploy Backend to Self-Hosted Runner on Pi

on:
  push:
    branches:
      - main

jobs:
  build: # Build job still runs on GitHub-hosted runners (for speed and cross-compilation)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Image Tag
        id: image_tag
        run: echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64 # Crucial for Raspberry Pi
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sharedbites-backend:${{ steps.image_tag.outputs.TAG }}
            ${{ secrets.DOCKER_USERNAME }}/sharedbites-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build # Depends on the build job completing
    runs-on: raspberrypi-daniel-lab # IMPORTANT: Specifies to run on your Pi
    steps:
      - name: Pull and restart container
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          export IMAGE_NAME=${DOCKER_USERNAME}/sharedbites-backend
          export IMAGE_TAG=latest
          export CONTAINER_NAME=sharedbites-backend-container
          export APP_PORT=8080
          export HOST_PORT=8080

          # Login to Docker Hub (if image is private and runner isn't already logged in)
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Pull the latest image
          docker pull $IMAGE_NAME:$IMAGE_TAG

          # Stop and remove existing container if it exists
          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping existing container..."
              docker stop $CONTAINER_NAME
          fi
          if [ "$(docker ps -aq -f status=exited -f name=$CONTAINER_NAME)" ]; then
              echo "Removing existing container..."
              docker rm $CONTAINER_NAME
          fi

          # Run the new container
          docker run -d \
            --name $CONTAINER_NAME \
            -p $HOST_PORT:$APP_PORT \
            --restart unless-stopped \
            -e DB_DSN="${{ secrets.DB_DSN }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            -e FIREBASE_SERVICE_ACCOUNT_KEY_PATH="/app/firebase-key.json" \
            -v ${{ secrets.FIREBASE_KEY_PATH }}:/app/firebase-key.json:ro \
            $IMAGE_NAME:$IMAGE_TAG

          # Clean up old images
          docker image prune -af
